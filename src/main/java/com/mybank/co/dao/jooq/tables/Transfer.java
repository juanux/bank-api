/*
 * This file is generated by jOOQ.
 */
package com.mybank.co.dao.jooq.tables;


import com.mybank.co.dao.jooq.DefaultSchema;
import com.mybank.co.dao.jooq.Keys;
import com.mybank.co.dao.jooq.tables.records.TransferRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transfer extends TableImpl<TransferRecord> {

    private static final long serialVersionUID = 1018587701;

    /**
     * The reference instance of <code>TRANSFER</code>
     */
    public static final Transfer TRANSFER = new Transfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRecord> getRecordType() {
        return TransferRecord.class;
    }

    /**
     * The column <code>TRANSFER.id</code>.
     */
    public final TableField<TransferRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>TRANSFER.source_account_id</code>.
     */
    public final TableField<TransferRecord, String> SOURCE_ACCOUNT_ID = createField(DSL.name("source_account_id"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>TRANSFER.target_account_id</code>.
     */
    public final TableField<TransferRecord, String> TARGET_ACCOUNT_ID = createField(DSL.name("target_account_id"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>TRANSFER.amount</code>.
     */
    public final TableField<TransferRecord, Double> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TRANSFER.date_time</code>.
     */
    public final TableField<TransferRecord, LocalDateTime> DATE_TIME = createField(DSL.name("date_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>TRANSFER.status</code>.
     */
    public final TableField<TransferRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>TRANSFER</code> table reference
     */
    public Transfer() {
        this(DSL.name("TRANSFER"), null);
    }

    /**
     * Create an aliased <code>TRANSFER</code> table reference
     */
    public Transfer(String alias) {
        this(DSL.name(alias), TRANSFER);
    }

    /**
     * Create an aliased <code>TRANSFER</code> table reference
     */
    public Transfer(Name alias) {
        this(alias, TRANSFER);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Transfer(Table<O> child, ForeignKey<O, TransferRecord> key) {
        super(child, key, TRANSFER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TransferRecord> getPrimaryKey() {
        return Keys.PK_TRANSFER;
    }

    @Override
    public List<UniqueKey<TransferRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferRecord>>asList(Keys.PK_TRANSFER);
    }

    @Override
    public List<ForeignKey<TransferRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransferRecord, ?>>asList(Keys.FK_TRANSFER_ACCOUNT_2, Keys.FK_TRANSFER_ACCOUNT_1);
    }

    public Account fkTransferAccount_2() {
        return new Account(this, Keys.FK_TRANSFER_ACCOUNT_2);
    }

    public Account fkTransferAccount_1() {
        return new Account(this, Keys.FK_TRANSFER_ACCOUNT_1);
    }

    @Override
    public Transfer as(String alias) {
        return new Transfer(DSL.name(alias), this);
    }

    @Override
    public Transfer as(Name alias) {
        return new Transfer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(String name) {
        return new Transfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Name name) {
        return new Transfer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, Double, LocalDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
