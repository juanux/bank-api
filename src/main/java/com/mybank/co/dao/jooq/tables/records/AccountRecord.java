/*
 * This file is generated by jOOQ.
 */
package com.mybank.co.dao.jooq.tables.records;


import com.mybank.co.dao.jooq.tables.Account;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record5<String, String, Double, String, Boolean> {

    private static final long serialVersionUID = -1824900924;

    /**
     * Setter for <code>ACCOUNT.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>ACCOUNT.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ACCOUNT.user_id</code>.
     */
    public void setUserId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>ACCOUNT.user_id</code>.
     */
    public String getUserId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ACCOUNT.balance</code>.
     */
    public void setBalance(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>ACCOUNT.balance</code>.
     */
    public Double getBalance() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>ACCOUNT.currency</code>.
     */
    public void setCurrency(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>ACCOUNT.currency</code>.
     */
    public String getCurrency() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ACCOUNT.active</code>.
     */
    public void setActive(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>ACCOUNT.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, Double, String, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, Double, String, Boolean> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Account.ACCOUNT.ID;
    }

    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.USER_ID;
    }

    @Override
    public Field<Double> field3() {
        return Account.ACCOUNT.BALANCE;
    }

    @Override
    public Field<String> field4() {
        return Account.ACCOUNT.CURRENCY;
    }

    @Override
    public Field<Boolean> field5() {
        return Account.ACCOUNT.ACTIVE;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUserId();
    }

    @Override
    public Double component3() {
        return getBalance();
    }

    @Override
    public String component4() {
        return getCurrency();
    }

    @Override
    public Boolean component5() {
        return getActive();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUserId();
    }

    @Override
    public Double value3() {
        return getBalance();
    }

    @Override
    public String value4() {
        return getCurrency();
    }

    @Override
    public Boolean value5() {
        return getActive();
    }

    @Override
    public AccountRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public AccountRecord value2(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public AccountRecord value3(Double value) {
        setBalance(value);
        return this;
    }

    @Override
    public AccountRecord value4(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public AccountRecord value5(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public AccountRecord values(String value1, String value2, Double value3, String value4, Boolean value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(String id, String userId, Double balance, String currency, Boolean active) {
        super(Account.ACCOUNT);

        set(0, id);
        set(1, userId);
        set(2, balance);
        set(3, currency);
        set(4, active);
    }
}
